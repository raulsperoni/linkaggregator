{"version":3,"sources":["webpack:///./src/components/card.js","webpack:///./src/pages/index.js"],"names":["Card","idx","sourceTitle","sourceIcon","title","pubDate","link","featuredImage","contentSnippet","key","href","className","alt","src","toLocaleDateString","IndexPage","data","useStaticQuery","blogPosts","allFeedBlog","nodes","map","node","Object","assign","feedRecetarioMeta","sourceName","role","aria-label","Date","recetarioPosts","allFeedRecetario","allPosts","concat","sort","a","b","index"],"mappings":"+JAwCiBA,EArCJ,SAAC,GAA2F,IAAzFC,EAAwF,EAAxFA,IAAKC,EAAmF,EAAnFA,YAAaC,EAAsE,EAAtEA,WAAYC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eAGjF,OACE,uBAAGC,IAAKR,EAAKS,KAAMJ,EAAMK,UAAU,gEACjC,yBAAKC,IAAI,cACJD,UAAU,6IACVE,IAAKN,IAEV,yBACEI,UAAU,2KACV,yBAAKA,UAAU,QACb,yBAAKA,UAAU,mDAAmDP,GAClE,uBAAGO,UAAU,4BAA4BH,IAE3C,yBAAKG,UAAU,qBACb,0BAAMA,UAAU,YAAYR,GAC5B,yBAAKQ,UAAU,kDACb,uBAAGA,UAAU,2BAAb,gBAAoD,2BAAIT,IACxD,uBAAGS,UAAU,wBAAuB,+BAAQN,EAAQS,4BCgEjDC,UA/EG,WAEhB,IAAMC,EAAOC,yBAAe,cA6CtBC,EAAYF,EAAKG,YAAYC,MAAMC,KAAI,SAAAC,GAAI,OAAIC,OAAOC,OAAOD,OAAOC,OAAOF,EAAMN,EAAKS,mBAAoB,CAC9GC,WAAY,aACZvB,WAAY,0BAAMwB,KAAK,MAAMC,aAAW,kBAA5B,OACZvB,QAAS,IAAIwB,KAAKP,EAAKjB,cAEnByB,EAAiBd,EAAKe,iBAAiBX,MAAMC,KAAI,SAAAC,GAAI,OAAIC,OAAOC,OAAOD,OAAOC,OAAOF,EAAMN,EAAKS,mBAAoB,CACxHC,WAAY,YACZvB,WAAY,0BAAMwB,KAAK,MAAMC,aAAW,kBAA5B,SACZvB,QAAS,IAAIwB,KAAKP,EAAKjB,cAErB2B,EAAWd,EAAUe,OAAOH,GAGhC,OAFAE,EAASE,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE/B,QAAU8B,EAAE9B,WAKpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAM,uBACX,yBAAKO,UAAU,qDACZqB,EAASX,KAAI,SAACC,EAAMe,GAAP,OACZ,kBAAC,EAAD,CAAM5B,IAAK,QAAQ4B,EAAOpC,IAAKoC,EAAOjC,MAAOkB,EAAKlB,MAC5CI,eAAgBc,EAAKd,eACrBD,cAAee,EAAKf,cACpBD,KAAMgB,EAAKhB,KACXD,QAASiB,EAAKjB,QACdH,YAAaoB,EAAKI,WAClBvB,WAAYmB,EAAKnB","file":"component---src-pages-index-js-abcc57195dcfc70a73ce.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Card = ({ idx, sourceTitle, sourceIcon, title, pubDate, link, featuredImage, contentSnippet }) => {\n\n\n  return (\n    <a key={idx} href={link} className=\"w-full md:w-2/3 mx-auto my-5 lg:max-w-full lg:flex shadow-lg\">\n      <img alt=\"Placeholder\"\n           className=\"w-full h-32 md:h-48 lg:h-auto lg:w-48 object-cover flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden\"\n           src={featuredImage} />\n\n      <div\n        className=\"border-r border-b border-l border-gray-100 lg:border-l-0 lg:border-t bg-white rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal\">\n        <div className=\"mb-4\">\n          <div className=\"text-blue-800 text-black font-bold text-xl mb-2\">{title}</div>\n          <p className=\"text-grey-darker text-sm\">{contentSnippet}</p>\n        </div>\n        <div className=\"flex items-center\">\n          <span className=\"text-3xl\">{sourceIcon}</span>\n          <div className=\"flex items-center justify-between text-sm ml-2\">\n            <p className=\"text-black leading-none\">publicado en <b>{sourceTitle}</b></p>\n            <p className=\"ml-10 text-grey-dark\"><small>{pubDate.toLocaleDateString()}</small></p>\n          </div>\n        </div>\n      </div>\n    </a>\n  )\n}\n\n  Card.propTypes = {\n    sourceTitle: PropTypes.string.isRequired,\n    sourceIcon: PropTypes.any.isRequired,\n    title: PropTypes.string.isRequired,\n    pubDate: PropTypes.any.isRequired,\n    link: PropTypes.string.isRequired,\n    featuredImage: PropTypes.string.isRequired,\n    contentSnippet: PropTypes.string.isRequired\n  }\n\n  export default Card\n","import React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Card from \"../components/card\"\n\nconst IndexPage = () => {\n\n  const data = useStaticQuery(graphql`\n    {\n      site {\n        buildTime\n        siteMetadata {\n          social {\n            instagram\n            twitter\n          }\n          links\n          description\n          title\n        }\n      }\n      feedBlogMeta {\n        sourceTitle: title \n        sourceLink: link\n        sourceDescription: description\n      }\n      allFeedBlog {\n        nodes {\n          title\n          pubDate\n          link\n          featuredImage\n          contentSnippet\n        }\n      }\n      feedRecetarioMeta {\n        sourceTitle: title \n        sourceLink: link\n        sourceDescription: description \n      }\n      allFeedRecetario {\n        nodes {\n          title\n          pubDate\n          link\n          featuredImage\n          contentSnippet\n        }\n      }\n   }\n  `)\n\n  const blogPosts = data.allFeedBlog.nodes.map(node => Object.assign(Object.assign(node, data.feedRecetarioMeta), {\n    sourceName: \"UnBa√∫l.com\",\n    sourceIcon: <span role=\"img\" aria-label=\"Emoji escritor\">‚úçüèº</span>,\n    pubDate: new Date(node.pubDate)\n  }))\n  const recetarioPosts = data.allFeedRecetario.nodes.map(node => Object.assign(Object.assign(node, data.feedRecetarioMeta), {\n    sourceName: \"Recetario\",\n    sourceIcon: <span role=\"img\" aria-label=\"Emoji cocinero\">üë®‚Äçüç≥</span>,\n    pubDate: new Date(node.pubDate)\n  }))\n  let allPosts = blogPosts.concat(recetarioPosts)\n  allPosts.sort((a, b) => b.pubDate - a.pubDate)\n\n  return (\n\n\n    <Layout>\n      <SEO title=\"Agregador de Links\" />\n      <div className=\"mx-auto w-11/12 md:w-8/12 lg:w-5/12 flex flex-col\">\n        {allPosts.map((node, index) => (\n          <Card key={\"card_\"+index} idx={index} title={node.title}\n                contentSnippet={node.contentSnippet}\n                featuredImage={node.featuredImage}\n                link={node.link}\n                pubDate={node.pubDate}\n                sourceTitle={node.sourceName}\n                sourceIcon={node.sourceIcon} />))}\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"sourceRoot":""}